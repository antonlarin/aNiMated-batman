#ifndef SolverWrapper_H
#define SolverWrapper_H

#include <node.h>
#include <node_object_wrap.h>
#include <HES_Solver.h>

#define SW_DEFAULT_FUNC  "0"
#define SW_DEFAULT_TIME  1.0
#define SW_DEFAULT_GRID  1000

typedef v8::FunctionCallbackInfo<v8::Value> Arguments;

// Solver wrapper for V8 engine
class Solver : public node::ObjectWrap {

private:
	static v8::Persistent<v8::Function> constructor;

	HES_Task mTask;
	HES_Status mStat;

	int32_t mGridN;
	int32_t mGridM;
	bool mIsSolved;

public:
	static void Init(v8::Handle<v8::Object> exports);

private:
	Solver();
	~Solver();

	void InitializeDefault();

	// Wrappers for solver methods
	static void New                    (const Arguments& args);
	static void SetTimeLimit           (const Arguments& args);
	static void SetDimensions          (const Arguments& args);
	static void SetInitialConditions   (const Arguments& args);
	static void LeftBoundaryCondition  (const Arguments& args);
	static void RightBoundaryCondition (const Arguments& args);
	static void SetRHSFunction         (const Arguments& args);
	static void GetLayer               (const Arguments& args);
	static void GetTable               (const Arguments& args);
	static void Solve                  (const Arguments& args);
 
	// Internal methods for throw V8 exceptions
	static void Exp    (const char* message);
	static bool StatExp(const HES_Status& status);

};

#endif
